name: CI-build-apps

on:
  pull_request:
    branches:
      - main

  # Daily build
  schedule:
  - cron: "0 2 * * *"

  push:
    branches:
      - main

  workflow_dispatch:

jobs:

  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set version
        id: set-version
        run: |
          echo "GitHub event: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"

          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            VERSION=$(scripts/increment_version.sh "${{ vars.VERSION }}")
            # Increment version number now, even if tests fail, to avoid race conditions
            curl --silent --show-error --fail --location --request PATCH \
              --header "Accept: application/vnd.github+json" \
              --header "Authorization: Bearer ${{ secrets.PAT_VARIABLES }}" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/variables/VERSION \
              -d "{\"value\":\"${VERSION}\"}"
            elif [ "${{ github.event_name }}" == "pull_request" ]; then
            SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
            VERSION="pr-${{ github.event.number }}-${SHORT_SHA}"
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            VERSION="${{ vars.VERSION }}"
          else
            SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
            VERSION="adhoc-${SHORT_SHA}"
          fi
          echo "version=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-base:
    needs: get-version
    runs-on:
      - ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build base
        run: |
          cd base/docker
          bash build.sh

      - name: Build and export
        run: |
          docker save --output=${{ runner.temp }}/workflows-base.tar aperturedata/workflows-base:latest

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: workflows-base
          path: ${{ runner.temp }}/workflows-base.tar

  build-test-apps:
    needs: [ build-base, get-version ]

    strategy:
      matrix:
        app: [
          dataset-ingestion,
          object-detection,
          embeddings-extraction,
          face-detection,
          jupyterlab,
          rag,
          mcp-server,
          crawl-website,
          text-extraction,
          text-embeddings,
          ingest-croissant,
          ingest-from-bucket,
          ingest-from-sql,
          sql-server,
          label-studio,
          ocr-extraction,
          add-width-and-height,
        ]
    runs-on:
      - ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: workflows-base
          path: ${{ runner.temp }}

      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/workflows-base.tar
          docker image ls -a

      - uses: aperture-data/common_job_steps@v1
        with:
          registry_username: ${{ fromJson(secrets.DOCKERHUB).username }}
          registry_password: ${{ fromJson(secrets.DOCKERHUB).password }}

      - uses: actions/checkout@v3

      - name: Test app
        env:
          CLEANUP: "true"
          WF_LOGS_AWS_CREDENTIALS: ${{ secrets.WF_LOGS_AWS_CREDENTIALS }}
          WF_DATA_SOURCE_GCP_BUCKET: ${{ secrets.WF_DATA_SOURCE_GCP_BUCKET }}
        run: |
          cd apps/${{ matrix.app }}
          if [ -f "test.sh" ]; then
            WORKFLOW_VERSION=$VERSION VERSION=latest bash test.sh
          else
            WORKFLOW_VERSION=$VERSION VERSION=latest bash ../build.sh
          fi

      - name: Push to docker (on main)
        # Only push to docker when merged to main
        # Pushing base to docker should be no-op after the first time
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker tag aperturedata/workflows-base aperturedata/workflows-base:$VERSION
          docker push aperturedata/workflows-base:$VERSION
          docker tag aperturedata/workflows-${{ matrix.app }} aperturedata/workflows-${{ matrix.app }}:$VERSION
          docker push aperturedata/workflows-${{ matrix.app }}:$VERSION

  build-test-meta:
    needs: [build-base, get-version]

    runs-on:
      - deployer
      - self-hosted

    env:
      VERSION: ${{ needs.get-version.outputs.version  }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: workflows-base
          path: ${{ runner.temp }}

      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/workflows-base.tar
          docker image ls -a

      - uses: actions/checkout@v3

      - uses: aperture-data/common_job_steps@v1
        with:
          registry_username: ${{ fromJson(secrets.DOCKERHUB).username }}
          registry_password: ${{ fromJson(secrets.DOCKERHUB).password }}

      - name: Test meta workflow
        env:
          CLEANUP: "true"
          WF_LOGS_AWS_CREDENTIALS: ${{ secrets.WF_LOGS_AWS_CREDENTIALS }}
          WF_DATA_SOURCE_GCP_BUCKET: ${{ secrets.WF_DATA_SOURCE_GCP_BUCKET }}
        run: |
          cd apps/crawl-to-rag
          bash test.sh

      - name: Push to docker (on main)
        # Only push to docker when merged to main
        # Pushing base to docker should be no-op after the first time
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Using version $VERSION"
          docker tag aperturedata/workflows-crawl-to-rag aperturedata/workflows-crawl-to-rag:$VERSION
          docker push aperturedata/workflows-crawl-to-rag:$VERSION

  update-version:
    needs: [build-test-meta, build-test-apps, get-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    env:
      VERSION: ${{ needs.get-version.outputs.version }}

    steps:
      - name: Comment on commit with version
        env:
          SHA: ${{ github.sha }}
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -s -H "Authorization: Bearer ${{ secrets.PAT_VARIABLES }}" \
                -H "Accept: application/vnd.github+json" \
                -X POST \
                https://api.github.com/repos/${{ github.repository }}/commits/$SHA/comments \
                -d "{\"body\": \"Built and published Docker images for version \`$VERSION\`.  [View workflow run]($RUN_URL)\"}"

      - name: Extract PR number from squash commit
        id: find_pr
        run: |
          set -euo pipefail
          SHA="${{ github.sha }}"
          COMMIT_MSG=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_VARIABLES }}" \
          https://api.github.com/repos/${{ github.repository }}/commits/$SHA | jq -r .commit.message)
          PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oE '#[0-9]+' | head -1 | tr -d '#' || true)
          if [ -n "$PR_NUMBER" ]; then
            echo "Found PR number: $PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "No PR number found in commit message"
          fi

      - name: Comment on PR
        if: steps.find_pr.outputs.pr_number != ''
        run: |
          REPO="${{ github.repository }}"
          PR_NUMBER="${{ steps.find_pr.outputs.pr_number }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          BODY=$(jq -nc --arg ver "$VERSION" --arg run_url "$RUN_URL" '{
            body: "Docker images for version \($ver) were built and pushed after this PR was merged.  [View workflow run](\($run_url))"
          }')

          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.PAT_VARIABLES }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${REPO}/issues/${PR_NUMBER}/comments \
            -d "$BODY"

      - name: Update version on infra develop
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.PAT_INFRA }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/aperture-data/infra/dispatches \
          -d "{\"event_type\": \"update-tag\", \"client_payload\": {\"environment\":\"develop\", \"component\": \"workflows-public\", \"tag\": \"${VERSION}\"}}"
