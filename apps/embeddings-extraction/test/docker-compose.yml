services:
  # One image for both seed and tests (Python + aperturedb + pytest + CLIP)
  # Use the same image; just change the command.
  test-base:
    build:
      context: apps/embeddings-extraction/test
      dockerfile: Dockerfile
    image: aperturedata/workflows-embeddings-extraction-tests:${VERSION:-latest}
    deploy:
      replicas: 0

  # Populate ApertureDB with synthetic test data
  seed:
    image: aperturedata/workflows-embeddings-extraction-tests:${VERSION:-latest}
    depends_on:
      lenz:
        condition: service_started
    working_dir: /app
    environment:
      DB_HOST: lenz
      DB_PORT: 55551
      DB_USER: admin
      DB_PASS: admin
      CA_CERT: /ca/ca.crt
    volumes:
      - ./ca:/ca
    command: ["python", "/app/seed.py"]

  embeddings-extraction:
    image: aperturedata/workflows-embeddings-extraction:${VERSION:-latest}
    depends_on:
      seed:
        condition: service_completed_successfully
    environment:
      DB_HOST: lenz
      DB_PORT: 55551
      DB_USER: admin
      DB_PASS: admin
      CA_CERT: /ca/ca.crt
      WF_AUTH_TOKEN: test
      WF_EXTRACT_IMAGES: "true"
      WF_EXTRACT_PDFS: "true"
      WF_EXTRACT_IMAGE_TEXT: "true"
      WF_EXTRACT_PDF_TEXT: "true"
      WF_EXTRACT_VIDEOS: "true"
    volumes:
      - ./ca:/ca

  # Test runner
  tests:
    image: aperturedata/workflows-embeddings-extraction-tests:${VERSION:-latest}
    depends_on:
      embeddings-extraction:
        condition: service_completed_successfully
    environment:
      DB_HOST: lenz
      DB_PORT: 55551
      DB_USER: admin
      DB_PASS: admin
      CA_CERT: /ca/ca.crt
    working_dir: /app
    volumes:
      - ./ca:/ca
    command: ["pytest",  "-vv", "-s", "-rA", "--log-cli-level=DEBUG"]