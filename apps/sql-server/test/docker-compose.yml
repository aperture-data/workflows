services:
  # One image for both seed and tests (Python + aperturedb + pytest + psycopg)
  # Use the same image; just change the command.
  test-base:
    build:
      context: apps/sql-server/test
      dockerfile: Dockerfile
    image: aperturedata/workflows-sql-server-tests:${VERSION:-latest}
    deploy:
      replicas: 0

  # Populate ApertureDB with synthetic test data
  seed:
    image: aperturedata/workflows-sql-server-tests:${VERSION:-latest}
    depends_on:
      lenz:
        condition: service_started
    working_dir: /app
    environment:
      DB_HOST: lenz
      DB_PORT: 55551
      DB_USER: admin
      DB_PASS: admin
      CA_CERT: /ca/ca.crt
    volumes:
      - ./ca:/ca
    command: ["python", "/app/seed.py"]
    # command: ["sleep", "infinity"]

  sql-server:
    depends_on:
      seed:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/app/healthcheck.sh"]
      interval: 3s
      timeout: 3s
      start_period: 20s
      retries: 60
    environment:
      DB_HOST: lenz
      DB_PORT: 55551
      DB_USER: admin
      DB_PASS: admin
      CA_CERT: /ca/ca.crt
      APERTUREDB_KEY: ""
      WF_AUTH_TOKEN: test
      WF_LOG_LEVEL: DEBUG
    volumes:
      - ./ca:/ca

  # Test runner
  tests:
    image: aperturedata/workflows-sql-server-tests:${VERSION:-latest}
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      # Postgres (SQL server workflow)
      SQL_HOST: sql-server
      SQL_PORT: 5432
      SQL_NAME: aperturedb
      SQL_USER: aperturedb
      SQL_PASS: test
    working_dir: /app
    command: ["pytest",  "-vv", "-s", "-rA", "--log-cli-level=DEBUG"]