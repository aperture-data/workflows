# if length of command line arguments is 0, then print usage
CI_RUN=${CI_RUN:-0}
RUNNER_NAME="${RUNNER_NAME:-runner}"
RUNNER_NAME="${RUNNER_NAME// /}"
RUNNER_NAME="${RUNNER_NAME,,}"

export BIN_DIR=$PWD
export ROOT_DIR=$BIN_DIR/../..
COMPOSE_PROJECT_NAME="${RUNNER_NAME}-$(basename $BIN_DIR)"


COMPOSE_MAIN="$ROOT_DIR/docker-compose.yml"
COMPOSE_SCRIPT="$ROOT_DIR/compose.sh"


COMMAND="$COMPOSE_SCRIPT -v -p $COMPOSE_PROJECT_NAME -f $COMPOSE_MAIN"
# Check if test directory exists
if [ -d "$BIN_DIR/test" ]; then
  COMPOSE_TEST="$BIN_DIR/test/docker-compose.yml"
  COMMAND="$COMMAND -f $COMPOSE_TEST"
fi

echo "COMMAND: $COMMAND"

export DB_HOST="lenz"
export DB_PORT="55551"
export DB_PASS="admin"
export DB_TCP_CN="lenz"
export DB_HTTP_CN="nginx"

cleanup() {
  $COMMAND down --remove-orphans || true
}

final_banner() {
  rc=$1
  if [ $rc -eq 0 ]; then
    printf "\n\033[1;32m✅  SUCCESS\033[0m: %s\n" "$COMPOSE_PROJECT_NAME"
  else
    printf "\n\033[1;31m❌  FAILURE\033[0m: %s (exit code %d)\n" \
      "$COMPOSE_PROJECT_NAME" "$rc"
  fi
}

trap 'ret=$?; cleanup; final_banner $ret ; exit $ret' EXIT

run_pytest() {
  BUILD_WORKFLOW=${BUILD_WORKFLOW:-1}
  # ---- run tests ----
  echo ">>> Running $COMPOSE_PROJECT_NAME tests (project=$COMPOSE_PROJECT_NAME)"


  # Should the test script be building this workflow?
  if [ $CI_RUN -eq 0 ]; then
    $COMMAND build base
  fi

  if [ $BUILD_WORKFLOW -eq 1 ]; then
    $COMMAND build test-base $COMPOSE_PROJECT_NAME
  else
    $COMMAND build test-base
  fi

  # This log file is useful for debugging test failures
  TEST_LOG=$BIN_DIR/test.log
  echo "Writing logs to $TEST_LOG"
  (
    sleep 5
    $COMMAND logs -f > $TEST_LOG
  ) &
  LOG_PID=$!

  $COMMAND up --no-build --exit-code-from tests tests

  # Wait for logs to finish
  kill $LOG_PID || true
}
